{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Wizardworks\\\\magic-squares-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [squares, setSquares] = useState([]);\n  const size = 30; // Size of each square\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\").then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      const newSquare = {\n        color: data.color\n      };\n      setSquares([...squares, newSquare]);\n    }).catch(error => {\n      console.error(\"There was an error fetching the color!\", error);\n    });\n  };\n\n  // Create grid layout using simple math\n  const renderSquares = () => {\n    const numSquares = squares.length;\n    const rows = [];\n    let row = [];\n\n    // Fill row first, then column, alternating\n    for (let i = 0; i < numSquares; i++) {\n      row.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square\",\n        style: {\n          backgroundColor: squares[i].color,\n          width: `${size}px`,\n          height: `${size}px`,\n          margin: \"5px\"\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this));\n      if (i % 2 === 1) {\n        rows.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square-row\",\n          style: {\n            display: \"flex\"\n          },\n          children: row\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this));\n        row = [];\n      }\n    }\n    if (row.length > 0) {\n      rows.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square-row\",\n        style: {\n          display: \"flex\"\n        },\n        children: row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square-container\",\n      children: renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-btn\",\n      onClick: addSquare,\n      children: \"Add Square\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"clear-btn\",\n      onClick: () => setSquares([]),\n      children: \"Clear Squares\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NEIoD6bRl4K14ROd8WisLnBpVR4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","squares","setSquares","size","addSquare","fetch","then","response","ok","Error","json","data","newSquare","color","catch","error","console","renderSquares","numSquares","length","rows","row","i","push","className","style","backgroundColor","width","height","margin","fileName","_jsxFileName","lineNumber","columnNumber","display","children","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/Wizardworks/magic-squares-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [squares, setSquares] = useState([]);\n  const size = 30; // Size of each square\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\")\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        const newSquare = {\n          color: data.color,\n        };\n        setSquares([...squares, newSquare]);\n      })\n      .catch(error => {\n        console.error(\"There was an error fetching the color!\", error);\n      });\n  };\n\n  // Create grid layout using simple math\n  const renderSquares = () => {\n    const numSquares = squares.length;\n    const rows = [];\n    let row = [];\n\n    // Fill row first, then column, alternating\n    for (let i = 0; i < numSquares; i++) {\n      row.push(\n        <div\n          key={i}\n          className=\"square\"\n          style={{\n            backgroundColor: squares[i].color,\n            width: `${size}px`,\n            height: `${size}px`,\n            margin: \"5px\",\n          }}\n        ></div>\n      );\n\n      if (i % 2 === 1) {\n        rows.push(\n          <div key={i} className=\"square-row\" style={{ display: \"flex\" }}>\n            {row}\n          </div>\n        );\n        row = [];\n      }\n    }\n\n    if (row.length > 0) {\n      rows.push(\n        <div className=\"square-row\" style={{ display: \"flex\" }}>\n          {row}\n        </div>\n      );\n    }\n\n    return rows;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"square-container\">{renderSquares()}</div>\n      <button className=\"add-btn\" onClick={addSquare}>Add Square</button>\n      <button className=\"clear-btn\" onClick={() => setSquares([])}>Clear Squares</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}