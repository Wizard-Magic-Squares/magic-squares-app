{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Wizardworks\\\\magic-squares-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [squares, setSquares] = useState([]);\n  const size = 30; // size of each square\n\n  useEffect(() => {\n    // Load saved squares when the component mounts\n    fetch(\"https://localhost:7044/api/square/squares\").then(response => response.json()).then(data => {\n      setSquares(data);\n    }).catch(error => {\n      console.error(\"Error loading squares:\", error);\n    });\n  }, []);\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\").then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      const newSquare = {\n        color: data.color,\n        position: squares.length // Store the position as the index in the squares array\n      };\n      const updatedSquares = [...squares, newSquare];\n      setSquares(updatedSquares);\n      saveSquares(updatedSquares); // Save the updated squares to the API\n    }).catch(error => {\n      console.error(\"There was an error fetching the color!\", error);\n    });\n  };\n  const saveSquares = squaresToSave => {\n    fetch(\"https://localhost:7044/api/square/squares\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(squaresToSave)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Error saving squares');\n      }\n    }).catch(error => {\n      console.error(\"There was an error saving the squares!\", error);\n    });\n  };\n  const clearSquares = () => {\n    // Clear the squares in the state\n    setSquares([]);\n\n    // Call the API to clear the squares\n    fetch(\"https://localhost:7044/api/square/squares/clear\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify([]) // Send an empty array to clear the squares\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Error clearing squares');\n      }\n    }).catch(error => {\n      console.error(\"There was an error clearing the squares!\", error);\n    });\n  };\n\n  // Logic to alternate between filling rows and columns dynamically\n  const calculatePosition = index => {\n    let row, col;\n    let level = Math.floor((Math.sqrt(1 + 8 * index) - 1) / 2); // Find the current \"level\" (row/col size)\n    let maxInLevel = level * (level + 1) / 2; // Max number of squares in this level\n    let offset = index - maxInLevel;\n    if (level % 2 === 0) {\n      // If level is even, fill row first\n      row = level + 1;\n      col = offset + 1;\n    } else {\n      // If level is odd, fill column first\n      col = level + 1;\n      row = offset + 1;\n    }\n    return {\n      row,\n      col\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square-container\",\n      children: squares.map((square, index) => {\n        const {\n          row,\n          col\n        } = calculatePosition(index);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            backgroundColor: square.color,\n            width: `${size}px`,\n            height: `${size}px`,\n            gridColumn: col,\n            gridRow: row\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-btn\",\n        onClick: addSquare,\n        children: \"L\\xE4gg till en ruta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-btn\",\n        onClick: clearSquares,\n        children: \"Rensa alla rutor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+I8Xw6B29f1JOxAQNg7JrZQdLMo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","squares","setSquares","size","fetch","then","response","json","data","catch","error","console","addSquare","ok","Error","newSquare","color","position","length","updatedSquares","saveSquares","squaresToSave","method","headers","body","JSON","stringify","clearSquares","calculatePosition","index","row","col","level","Math","floor","sqrt","maxInLevel","offset","className","children","map","square","style","backgroundColor","width","height","gridColumn","gridRow","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/Wizardworks/magic-squares-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [squares, setSquares] = useState([]);\n  const size = 30; // size of each square\n\n  useEffect(() => {\n    // Load saved squares when the component mounts\n    fetch(\"https://localhost:7044/api/square/squares\")\n      .then(response => response.json())\n      .then(data => {\n        setSquares(data);\n      })\n      .catch(error => {\n        console.error(\"Error loading squares:\", error);\n      });\n  }, []);\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\")\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        const newSquare = {\n          color: data.color,\n          position: squares.length // Store the position as the index in the squares array\n        };\n        const updatedSquares = [...squares, newSquare];\n        setSquares(updatedSquares);\n        saveSquares(updatedSquares); // Save the updated squares to the API\n      })\n      .catch(error => {\n        console.error(\"There was an error fetching the color!\", error);\n      });\n  };\n\n  const saveSquares = (squaresToSave) => {\n    fetch(\"https://localhost:7044/api/square/squares\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(squaresToSave),\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error saving squares');\n      }\n    })\n    .catch(error => {\n      console.error(\"There was an error saving the squares!\", error);\n    });\n  };\n\n  const clearSquares = () => {\n    // Clear the squares in the state\n    setSquares([]);\n\n    // Call the API to clear the squares\n    fetch(\"https://localhost:7044/api/square/squares/clear\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify([]), // Send an empty array to clear the squares\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error clearing squares');\n      }\n    })\n    .catch(error => {\n      console.error(\"There was an error clearing the squares!\", error);\n    });\n  };\n\n  // Logic to alternate between filling rows and columns dynamically\n  const calculatePosition = (index) => {\n    let row, col;\n    let level = Math.floor((Math.sqrt(1 + 8 * index) - 1) / 2); // Find the current \"level\" (row/col size)\n    let maxInLevel = (level * (level + 1)) / 2; // Max number of squares in this level\n    let offset = index - maxInLevel;\n\n    if (level % 2 === 0) {\n      // If level is even, fill row first\n      row = level + 1;\n      col = offset + 1;\n    } else {\n      // If level is odd, fill column first\n      col = level + 1;\n      row = offset + 1;\n    }\n\n    return { row, col };\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"square-container\">\n        {squares.map((square, index) => {\n          const { row, col } = calculatePosition(index);\n          return (\n            <div\n              key={index}\n              className=\"square\"\n              style={{\n                backgroundColor: square.color,\n                width: `${size}px`,\n                height: `${size}px`,\n                gridColumn: col,\n                gridRow: row,\n              }}\n            ></div>\n          );\n        })}\n      </div>\n      <div className=\"buttons\">\n        <button className=\"add-btn\" onClick={addSquare}>LÃ¤gg till en ruta</button>\n        <button className=\"clear-btn\" onClick={clearSquares}>Rensa alla rutor</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}