{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Wizardworks\\\\magic-squares-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [squares, setSquares] = useState([]);\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\").then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      const newSquare = {\n        color: data.color\n      };\n      // Add new square to the state\n      setSquares(prevSquares => {\n        // Create a copy of the current squares\n        const squaresCopy = [...prevSquares];\n\n        // Find the next empty spot to add the new square\n        for (let i = 0; i < squaresCopy.length; i++) {\n          if (!squaresCopy[i]) {\n            squaresCopy[i] = newSquare;\n            return squaresCopy;\n          }\n        }\n\n        // If no empty spots, just push the new square\n        return [...squaresCopy, newSquare];\n      });\n    }).catch(error => {\n      console.error(\"There was an error fetching the color!\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square-container\",\n      children: squares.map((square, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square\",\n        style: {\n          backgroundColor: square.color\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-button\",\n      onClick: addSquare,\n      children: \"L\\xE4gg till en ruta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NEIoD6bRl4K14ROd8WisLnBpVR4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","squares","setSquares","addSquare","fetch","then","response","ok","Error","json","data","newSquare","color","prevSquares","squaresCopy","i","length","catch","error","console","className","children","map","square","index","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/Wizardworks/magic-squares-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [squares, setSquares] = useState([]);\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\")\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        const newSquare = {\n          color: data.color,\n        };\n        // Add new square to the state\n        setSquares(prevSquares => {\n          // Create a copy of the current squares\n          const squaresCopy = [...prevSquares];\n\n          // Find the next empty spot to add the new square\n          for (let i = 0; i < squaresCopy.length; i++) {\n            if (!squaresCopy[i]) {\n              squaresCopy[i] = newSquare;\n              return squaresCopy;\n            }\n          }\n\n          // If no empty spots, just push the new square\n          return [...squaresCopy, newSquare];\n        });\n      })\n      .catch(error => {\n        console.error(\"There was an error fetching the color!\", error);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"square-container\">\n        {squares.map((square, index) => (\n          <div key={index} className=\"square\" style={{ backgroundColor: square.color }}></div>\n        ))}\n      </div>\n      <button className=\"add-button\" onClick={addSquare}>LÃ¤gg till en ruta</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMO,SAAS,GAAGA,CAAA,KAAM;IACtBC,KAAK,CAAC,+CAA+C,CAAC,CACnDC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZ,MAAMC,SAAS,GAAG;QAChBC,KAAK,EAAEF,IAAI,CAACE;MACd,CAAC;MACD;MACAV,UAAU,CAACW,WAAW,IAAI;QACxB;QACA,MAAMC,WAAW,GAAG,CAAC,GAAGD,WAAW,CAAC;;QAEpC;QACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,WAAW,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;UAC3C,IAAI,CAACD,WAAW,CAACC,CAAC,CAAC,EAAE;YACnBD,WAAW,CAACC,CAAC,CAAC,GAAGJ,SAAS;YAC1B,OAAOG,WAAW;UACpB;QACF;;QAEA;QACA,OAAO,CAAC,GAAGA,WAAW,EAAEH,SAAS,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACN,CAAC;EAED,oBACEpB,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvB,OAAA;MAAKsB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9BpB,OAAO,CAACqB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzB1B,OAAA;QAAiBsB,SAAS,EAAC,QAAQ;QAACK,KAAK,EAAE;UAAEC,eAAe,EAAEH,MAAM,CAACX;QAAM;MAAE,GAAnEY,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoE,CACpF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNhC,OAAA;MAAQsB,SAAS,EAAC,YAAY;MAACW,OAAO,EAAE5B,SAAU;MAAAkB,QAAA,EAAC;IAAiB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CAAC;AAEV;AAAC9B,EAAA,CA/CQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}