{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Wizardworks\\\\magic-squares-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [squares, setSquares] = useState([]);\n  const size = 30; // Size of each square\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\").then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      const newSquare = {\n        color: data.color\n      };\n      setSquares(prevSquares => {\n        // Create a new array that includes the new square\n        return [...prevSquares, newSquare];\n      });\n    }).catch(error => {\n      console.error(\"There was an error fetching the color!\", error);\n    });\n  };\n\n  // Calculate the number of rows and columns\n  const numColumns = Math.ceil(Math.sqrt(squares.length));\n  const numRows = Math.ceil(squares.length / numColumns); // Rows based on total squares and columns\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square-container\",\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numColumns}, ${size}px)`,\n        gridAutoFlow: 'column',\n        // Fill in column first\n        gap: '2px' // Optional: Space between squares\n      },\n      children: squares.map((square, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square\",\n        style: {\n          backgroundColor: square.color,\n          width: `${size}px`,\n          height: `${size}px`,\n          transition: 'all 0.3s ease' // Add transition for smooth effect\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-btn\",\n      onClick: addSquare,\n      children: \"L\\xE4gg till en ruta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NEIoD6bRl4K14ROd8WisLnBpVR4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","squares","setSquares","size","addSquare","fetch","then","response","ok","Error","json","data","newSquare","color","prevSquares","catch","error","console","numColumns","Math","ceil","sqrt","length","numRows","className","children","style","display","gridTemplateColumns","gridAutoFlow","gap","map","square","index","backgroundColor","width","height","transition","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/Wizardworks/magic-squares-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [squares, setSquares] = useState([]);\n  const size = 30; // Size of each square\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\")\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        const newSquare = {\n          color: data.color,\n        };\n        setSquares(prevSquares => {\n          // Create a new array that includes the new square\n          return [...prevSquares, newSquare];\n        });\n      })\n      .catch(error => {\n        console.error(\"There was an error fetching the color!\", error);\n      });\n  };\n\n  // Calculate the number of rows and columns\n  const numColumns = Math.ceil(Math.sqrt(squares.length));\n  const numRows = Math.ceil(squares.length / numColumns); // Rows based on total squares and columns\n\n  return (\n    <div className=\"App\">\n      <div\n        className=\"square-container\"\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numColumns}, ${size}px)`,\n          gridAutoFlow: 'column', // Fill in column first\n          gap: '2px', // Optional: Space between squares\n        }}\n      >\n        {squares.map((square, index) => (\n          <div\n            key={index}\n            className=\"square\"\n            style={{\n              backgroundColor: square.color,\n              width: `${size}px`,\n              height: `${size}px`,\n              transition: 'all 0.3s ease', // Add transition for smooth effect\n            }}\n          ></div>\n        ))}\n      </div>\n      <button className=\"add-btn\" onClick={addSquare}>LÃ¤gg till en ruta</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMO,IAAI,GAAG,EAAE,CAAC,CAAC;;EAEjB,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtBC,KAAK,CAAC,+CAA+C,CAAC,CACnDC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZ,MAAMC,SAAS,GAAG;QAChBC,KAAK,EAAEF,IAAI,CAACE;MACd,CAAC;MACDX,UAAU,CAACY,WAAW,IAAI;QACxB;QACA,OAAO,CAAC,GAAGA,WAAW,EAAEF,SAAS,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAME,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,IAAI,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC;EACvD,MAAMC,OAAO,GAAGJ,IAAI,CAACC,IAAI,CAACnB,OAAO,CAACqB,MAAM,GAAGJ,UAAU,CAAC,CAAC,CAAC;;EAExD,oBACEpB,OAAA;IAAK0B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB3B,OAAA;MACE0B,SAAS,EAAC,kBAAkB;MAC5BE,KAAK,EAAE;QACLC,OAAO,EAAE,MAAM;QACfC,mBAAmB,EAAE,UAAUV,UAAU,KAAKf,IAAI,KAAK;QACvD0B,YAAY,EAAE,QAAQ;QAAE;QACxBC,GAAG,EAAE,KAAK,CAAE;MACd,CAAE;MAAAL,QAAA,EAEDxB,OAAO,CAAC8B,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzBnC,OAAA;QAEE0B,SAAS,EAAC,QAAQ;QAClBE,KAAK,EAAE;UACLQ,eAAe,EAAEF,MAAM,CAACnB,KAAK;UAC7BsB,KAAK,EAAE,GAAGhC,IAAI,IAAI;UAClBiC,MAAM,EAAE,GAAGjC,IAAI,IAAI;UACnBkC,UAAU,EAAE,eAAe,CAAE;QAC/B;MAAE,GAPGJ,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQN,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN3C,OAAA;MAAQ0B,SAAS,EAAC,SAAS;MAACkB,OAAO,EAAEtC,SAAU;MAAAqB,QAAA,EAAC;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEV;AAACzC,EAAA,CAzDQD,GAAG;AAAA4C,EAAA,GAAH5C,GAAG;AA2DZ,eAAeA,GAAG;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}