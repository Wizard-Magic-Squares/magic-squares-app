{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Wizardworks\\\\magic-squares-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [squares, setSquares] = useState([]);\n  const size = 30; // size of each square\n\n  useEffect(() => {\n    // Load saved squares when the component mounts\n    fetch(\"https://localhost:7044/api/square/squares\").then(response => response.json()).then(data => {\n      setSquares(data);\n    }).catch(error => {\n      console.error(\"Error loading squares:\", error);\n    });\n  }, []);\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\").then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      const newSquare = {\n        color: data.color,\n        position: squares.length // Store the position as the index in the squares array\n      };\n      const updatedSquares = [...squares, newSquare];\n      setSquares(updatedSquares);\n      saveSquares(updatedSquares); // Save the updated squares to the API\n    }).catch(error => {\n      console.error(\"There was an error fetching the color!\", error);\n    });\n  };\n  const saveSquares = squaresToSave => {\n    fetch(\"https://localhost:7044/api/square/squares\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(squaresToSave)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Error saving squares');\n      }\n    }).catch(error => {\n      console.error(\"There was an error saving the squares!\", error);\n    });\n  };\n  const clearSquares = () => {\n    // Clear the squares in the state\n    setSquares([]);\n\n    // Call the API to clear the squares\n    fetch(\"https://localhost:7044/api/square/squares/clear\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify([]) // Send an empty array to clear the squares\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Error clearing squares');\n      }\n    }).catch(error => {\n      console.error(\"There was an error clearing the squares!\", error);\n    });\n  };\n  const calculatePosition = index => {\n    // Determine the number of squares added so far\n    const squaresCount = index + 1; // +1 to account for zero-indexing\n    const currentPattern = Math.ceil(Math.sqrt(squaresCount)); // Determine the current pattern level\n\n    // Calculate which row and column to fill based on the current pattern\n    const isRowFill = squaresCount % 2 === 1; // True for odd counts (filling rows)\n\n    let row, col;\n    if (isRowFill) {\n      // Filling rows\n      row = Math.floor(squaresCount / currentPattern); // Determine the row number\n      col = squaresCount % currentPattern; // Determine the column number\n    } else {\n      // Filling columns\n      col = Math.floor(squaresCount / currentPattern); // Determine the column number\n      row = squaresCount % currentPattern; // Determine the row number\n    }\n    return {\n      row: row + 1,\n      col: col + 1\n    }; // +1 to convert from 0-indexed to 1-indexed\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square-container\",\n      children: squares.map((square, index) => {\n        const {\n          row,\n          col\n        } = calculatePosition(index);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            backgroundColor: square.color,\n            width: `${size}px`,\n            height: `${size}px`,\n            gridColumn: col,\n            gridRow: row\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-btn\",\n        onClick: addSquare,\n        children: \"L\\xE4gg till en ruta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-btn\",\n        onClick: clearSquares,\n        children: \"Rensa alla rutor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"+I8Xw6B29f1JOxAQNg7JrZQdLMo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","squares","setSquares","size","fetch","then","response","json","data","catch","error","console","addSquare","ok","Error","newSquare","color","position","length","updatedSquares","saveSquares","squaresToSave","method","headers","body","JSON","stringify","clearSquares","calculatePosition","index","squaresCount","currentPattern","Math","ceil","sqrt","isRowFill","row","col","floor","className","children","map","square","style","backgroundColor","width","height","gridColumn","gridRow","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/Wizardworks/magic-squares-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [squares, setSquares] = useState([]);\n  const size = 30; // size of each square\n\n  useEffect(() => {\n    // Load saved squares when the component mounts\n    fetch(\"https://localhost:7044/api/square/squares\")\n      .then(response => response.json())\n      .then(data => {\n        setSquares(data);\n      })\n      .catch(error => {\n        console.error(\"Error loading squares:\", error);\n      });\n  }, []);\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\")\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        const newSquare = {\n          color: data.color,\n          position: squares.length // Store the position as the index in the squares array\n        };\n        const updatedSquares = [...squares, newSquare];\n        setSquares(updatedSquares);\n        saveSquares(updatedSquares); // Save the updated squares to the API\n      })\n      .catch(error => {\n        console.error(\"There was an error fetching the color!\", error);\n      });\n  };\n\n  const saveSquares = (squaresToSave) => {\n    fetch(\"https://localhost:7044/api/square/squares\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(squaresToSave),\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error saving squares');\n      }\n    })\n    .catch(error => {\n      console.error(\"There was an error saving the squares!\", error);\n    });\n  };\n\n  const clearSquares = () => {\n    // Clear the squares in the state\n    setSquares([]);\n\n    // Call the API to clear the squares\n    fetch(\"https://localhost:7044/api/square/squares/clear\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify([]), // Send an empty array to clear the squares\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error clearing squares');\n      }\n    })\n    .catch(error => {\n      console.error(\"There was an error clearing the squares!\", error);\n    });\n  };\n\n  const calculatePosition = (index) => {\n    // Determine the number of squares added so far\n    const squaresCount = index + 1; // +1 to account for zero-indexing\n    const currentPattern = Math.ceil(Math.sqrt(squaresCount)); // Determine the current pattern level\n\n    // Calculate which row and column to fill based on the current pattern\n    const isRowFill = (squaresCount % 2 === 1); // True for odd counts (filling rows)\n\n    let row, col;\n\n    if (isRowFill) {\n        // Filling rows\n        row = Math.floor(squaresCount / currentPattern); // Determine the row number\n        col = squaresCount % currentPattern; // Determine the column number\n    } else {\n        // Filling columns\n        col = Math.floor(squaresCount / currentPattern); // Determine the column number\n        row = squaresCount % currentPattern; // Determine the row number\n    }\n\n    return { row: row + 1, col: col + 1 }; // +1 to convert from 0-indexed to 1-indexed\n};\n\n\nreturn (\n  <div className=\"App\">\n    <div className=\"square-container\">\n      {squares.map((square, index) => {\n        const { row, col } = calculatePosition(index);\n        return (\n          <div\n            key={index}\n            className=\"square\"\n            style={{\n              backgroundColor: square.color,\n              width: `${size}px`,\n              height: `${size}px`,\n              gridColumn: col,\n              gridRow: row,\n            }}\n          ></div>\n        );\n      })}\n    </div>\n    <div className=\"buttons\">\n      <button className=\"add-btn\" onClick={addSquare}>LÃ¤gg till en ruta</button>\n      <button className=\"clear-btn\" onClick={clearSquares}>Rensa alla rutor</button>\n    </div>\n  </div>\n);\n\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}