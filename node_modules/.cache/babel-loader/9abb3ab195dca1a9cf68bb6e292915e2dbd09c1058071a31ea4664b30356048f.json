{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Wizardworks\\\\magic-squares-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [squares, setSquares] = useState([]);\n  const size = 30; // Size of each square\n  const maxRowSize = 3; // Define how many squares per row before switching to column\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\").then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      const newSquare = {\n        color: data.color\n      };\n      setSquares([...squares, newSquare]);\n    }).catch(error => {\n      console.error(\"There was an error fetching the color!\", error);\n    });\n  };\n\n  // Create a grid where it switches between filling rows and columns\n  const renderGrid = () => {\n    const grid = [];\n    let rowCount = 0;\n    let colCount = 0;\n    squares.forEach((square, index) => {\n      if (rowCount < maxRowSize) {\n        // Fill the row\n        grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            backgroundColor: square.color,\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            top: `${rowCount * size}px`,\n            left: `${colCount * size}px`,\n            transition: 'all 0.3s ease'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this));\n        colCount++;\n        if (colCount === maxRowSize) {\n          colCount = 0;\n          rowCount++;\n        }\n      } else {\n        // Fill the column\n        grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            backgroundColor: square.color,\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            top: `${index % maxRowSize * size}px`,\n            left: `${rowCount * size}px`,\n            transition: 'all 0.3s ease'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this));\n        rowCount++;\n      }\n    });\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      position: 'relative',\n      width: '300px',\n      height: '300px'\n    },\n    children: [renderGrid(), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-btn\",\n      onClick: addSquare,\n      children: \"Add Square\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"clear-btn\",\n      onClick: () => setSquares([]),\n      children: \"Clear Squares\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NEIoD6bRl4K14ROd8WisLnBpVR4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","squares","setSquares","size","maxRowSize","addSquare","fetch","then","response","ok","Error","json","data","newSquare","color","catch","error","console","renderGrid","grid","rowCount","colCount","forEach","square","index","push","className","style","backgroundColor","width","height","position","top","left","transition","fileName","_jsxFileName","lineNumber","columnNumber","children","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/Wizardworks/magic-squares-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [squares, setSquares] = useState([]);\n  const size = 30; // Size of each square\n  const maxRowSize = 3; // Define how many squares per row before switching to column\n\n  const addSquare = () => {\n    fetch(\"https://localhost:7044/api/square/randomcolor\")\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        const newSquare = {\n          color: data.color,\n        };\n        setSquares([...squares, newSquare]);\n      })\n      .catch(error => {\n        console.error(\"There was an error fetching the color!\", error);\n      });\n  };\n\n  // Create a grid where it switches between filling rows and columns\n  const renderGrid = () => {\n    const grid = [];\n    let rowCount = 0;\n    let colCount = 0;\n\n    squares.forEach((square, index) => {\n      if (rowCount < maxRowSize) {\n        // Fill the row\n        grid.push(\n          <div\n            key={index}\n            className=\"square\"\n            style={{\n              backgroundColor: square.color,\n              width: `${size}px`,\n              height: `${size}px`,\n              position: 'absolute',\n              top: `${rowCount * size}px`,\n              left: `${colCount * size}px`,\n              transition: 'all 0.3s ease',\n            }}\n          ></div>\n        );\n        colCount++;\n        if (colCount === maxRowSize) {\n          colCount = 0;\n          rowCount++;\n        }\n      } else {\n        // Fill the column\n        grid.push(\n          <div\n            key={index}\n            className=\"square\"\n            style={{\n              backgroundColor: square.color,\n              width: `${size}px`,\n              height: `${size}px`,\n              position: 'absolute',\n              top: `${(index % maxRowSize) * size}px`,\n              left: `${rowCount * size}px`,\n              transition: 'all 0.3s ease',\n            }}\n          ></div>\n        );\n        rowCount++;\n      }\n    });\n\n    return grid;\n  };\n\n  return (\n    <div className=\"App\" style={{ position: 'relative', width: '300px', height: '300px' }}>\n      {renderGrid()}\n      <button className=\"add-btn\" onClick={addSquare}>Add Square</button>\n      <button className=\"clear-btn\" onClick={() => setSquares([])}>Clear Squares</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}